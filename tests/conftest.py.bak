# tests/conftest.py
import pytest
from flask import Flask
from app.models import Hospital
from app.db import init_db
from app.config.settings import settings
from app.security.routes.auth import auth_bp

@pytest.fixture(scope='session')
def create_app():
    """Create base application"""
    app = Flask(__name__)
    app.config['TESTING'] = True
    app.config['SQLALCHEMY_DATABASE_URI'] = settings.get_database_url_for_env('testing')
    app.config['SECRET_KEY'] = 'test_secret_key'
    
    # Register blueprints
    app.register_blueprint(auth_bp)
    
    return app

@pytest.fixture(scope='session')
def app(create_app):
    """Get application with context"""
    with create_app.app_context():
        yield create_app

@pytest.fixture(scope='session')
def db_manager(app):
    """Get database manager instance"""
    return init_db(settings.get_database_url_for_env('testing'))

@pytest.fixture(scope='session')
def session(db_manager):
    """Provide a database session"""
    with db_manager.get_session() as session:
        yield session

@pytest.fixture(scope='session')
def test_hospital(session):
    """Get test hospital from the session"""
    hospital = session.query(Hospital).filter_by(license_no="HC123456").first()
    if not hospital:
        raise ValueError("Test hospital not found - please run setup_test_db.py first")
    return hospital

@pytest.fixture(scope='function')
def client(app):
    """Create test client"""
    return app.test_client()